{
  
    
        "post0": {
            "title": "My jupyter notebook",
            "content": "print (&quot;Hello World.&quot;) . Hello World. .",
            "url": "https://gk92605.github.io/ginafastpages2/2022/08/28/jupyter_notebook.html",
            "relUrl": "/2022/08/28/jupyter_notebook.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Lit Weekly Participation 8_22 26",
            "content": "AP Literature &amp; Composition: Weekly Participation Assignments . This week in AP Literature and Composition, I gained more experience on analyzing characters and understanding their meaning to the bigger picture of the story. We annotated four short stories, all covering topics that relate to bigger issues in society and people that represent diverse people of the world. Such as in the short story, “The Tell-Tale Heart” by Edgar Allan Poe, Poe utilizes first person point of view to represent the thought process of a psychopath, while not justifying his actions. By using descriptive language to bring the main character’s heightened emotions of panic, fear, and anxiety to life, so that the audience will get to live through them as well. Then, we also analyzed “Girl” by Jamaica Kincaid and studied what the girl and second voice in the short story meant. We connected the writing to the societal standards that have been long placed on young girls and how they struggle to break out of it because they’re questions of society are quickly shot down. Our group concluded our discussion onto a single document, Speaker Analysis Chart, where we analyzed that the Point of View of “Girl” was written in was 2nd person with consciousness filled in because of the feeling that we the reader is the girl being reprimanded on how to act and that the point of view of “The Tell-Tale Heart” was 1st person so that the reader would understand the panic and confusion the character faces. Doing the chart with my group and then expanding the conversation with the class allowed me to recognize how interpretations of certain things can vary so much. For example, I had never considered the heart in “The Tell-Heart” to symbolize anything except for maybe guilt, but hearing others talk about their perspectives, such as someone mentioning that it could resemble anxiety, opened my eyes to the world of personal interpretations. This was continued in the individual readings of “LUSUS Naturae” and “The Interpreter of Maladies.” When first reading these alone, I was only able to scratch the surface of what the authors intended and what certain things meant, but as I discussed with my group, we were able to point out specific instances or aspects of the story that I hadn’t noticed before. Having people notice something new about the characters or plot, such as the symbolism of the monkeys in “The Interpreter of Maladies,” allowed me to look at the text in a new light and create completely new interpretations of the author’s meaning. Also filling out the Character analysis chart helped me recognize the importance of the supporting characters and their impact in creating the theme of the story. Despite disliking certain characters, such as the mother and sister in “LUSUS Naturae” and Mrs. Das in “The Interpreter of Maladies,” looking at every aspect of their lives the author intended to know helped me recognize that they were needed in creating the full story and message. This carried on onto our Friday Literary group talks as we read the same text, but created various meanings and important aspects of the power of text and literature. Throughout this week, I was able to learn a lot about how to look deeper into characters in order to understand their meaning and connect them to the bigger picture. .",
            "url": "https://gk92605.github.io/ginafastpages2/2022/08/28/Lit-Weekly-Participation-8_22-26.html",
            "relUrl": "/2022/08/28/Lit-Weekly-Participation-8_22-26.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "My First Markdown!",
            "content": "My First Markdown! . . Here’s some stuff about me! . I have a 2 year old dog named Willow. . I play the clarinet, but can also slightly play the piano. . My favorite group is Seventeen and favorite singer is Conan Gray. . . Fun Facts . Favorite movie: La La Land and Spy Kids . Favorite book: Six of Crows . Favorite song: Clouds by One Direction . Favorite food: French Fries . . Make tomorrow a better day than today. .",
            "url": "https://gk92605.github.io/ginafastpages2/markdown/2022/08/26/test-markdown-post.html",
            "relUrl": "/markdown/2022/08/26/test-markdown-post.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "My First Image!",
            "content": "My First Image! . . This is a photo of me and my friends! . . .",
            "url": "https://gk92605.github.io/ginafastpages2/markdown/2022/08/26/image-trial.html",
            "relUrl": "/markdown/2022/08/26/image-trial.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Intro to Python",
            "content": "Print command using Static Text which performs output . The classic introduction to a programming language is to output a &quot;Hello, World!&quot; message. In Python, this is a print statement. . The command or function is print() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the print command. | The print command outputs the parameter to the terminal, as you see it in this Jupyter document | Output in Jupyter Notebook is below the code cell. Output will vary depending on tools and development intentions. Python print typically outputs to a terminal, we will see that when students start using Visual Studio Code. | . print(&quot;Welcome to Python&quot;) . Welcome to Python . Dynamic example showing variables, input and output . This second example is a sequence of code, two or more lines forms a sequence. This example takes input from the user and stores the input into a variable called msg (short for message), then outputs the msg to terminal. - This example is Dynamic as the input and output can change each time the code is run. . A variable &quot;msg&quot; is part of both statement The variable &quot;msg&quot; is used to capture the input command | The variable &quot;msg&quot; is then used as a parameter to print command, causing input to be output to terminal, or in Jupyter Notebook below the code cell. | . | The &quot;input&quot; command activates the jupyter notebook input box, which obtains input from the user (try it!) the &quot;msg&quot; variable is the dynamic result of the input command | . | The print command outputs the &quot;msg&quot; variable captured in the input statement note, msg is a parameter to the print function | . | Input and Output in Jupyter Notebook Input is NOT in line with Output, this is a little annoyance and requires familiarity. Input and Output will vary depending on tools and development intentions. Python print typically obtains input and outputs to a terminal, students will see that when they run Python programs using Visual Studio Code. | . msg = input(&quot;Enter a greeting: &quot;) print(msg) . Building a Function . This example adds to the basics of the Python anatomy, a function. Input, output, and grouping commands in functions is the key to most programming languages. This example simulates a free response answer to a question. . The &quot;def question_and_answer(prompt)&quot; now contains multiple indented commands, the commands print and input were learned previously. | Grouping a sequence of commands, often used repeatedly, is called procedural abstraction. | Procedure, Function, def are all synonyms in the Python language. | The &quot;def&quot; is a key word in Python that defines a function. Using this keyword defines a group of commands, but does not run them initially. | The name of the function in this example is &quot;question_and_answer&quot;. In essence, we are defining our own command within the Python language. | The three &quot;question_and_answer&quot; commands that follow the function and indented commands allow this function to be run. | This code of the function is then run multiple times, each command line providing a unique &quot;prompt&quot; as a result of the literal parameter passed to the function. | The function takes a parameter called &quot;prompt&quot;, which is a message output to the user to describe the input requested. | String concatenation &quot;+&quot; prefixes the prompt with the literal message &quot;Question: &quot;. | The &quot;msg&quot; variable is captured as a result of the jupyter notebook input supplied by the user | The input &quot;msg&quot; is output back to the user with &quot;Answer: &quot; concatenated to the front. | . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) . Imports, Selection, and Logical Expressions . In Python anatomy of you will be importing libraries and functions. This is code that is developed by others. In this example we are importing from a library called &quot;os&quot;, this library extracts properties from the operating system of your existing system. Additionally, this example uses the custom function defined earlier in the Jupyter document. Python and Jupyter docs requires you to reference imports and definitions above the referencing line of code. . import os, sys obtain functions and variables from running environment | print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable + &quot; on &quot; + sys.platform + &quot;!&quot;), is a concatenated statement that outputs properties from the import | . Next, this example defines a new function &quot;question_with_response&quot;, this function returns a value input by the user. This allows programmer to evaluate the response. The purpose of obtaining the return value is to evaluate if correct response was given to the question. . response from &quot;question_with_response&quot; is captured in a variable called &quot;rsp&quot; return command in function returns msg input by user | assignment to &quot;rsp&quot; is allowed a function is returning a value, names do not need to match (but could) | . | if command is next command in sequence after &quot;rsp&quot; assignment this command contains an expression, rsp == &quot;import&quot; which compare what is typed to the string literal answer | an if expression is evaluated for true or false | true takes branch of code directly under if | false takes branch of code directly under else command | . | . The grand finally of this example is calculating the right/total. . question = 3 is defined as number of questions | correct = 0 is defined as running score | correct += 1 is the way to add one to the score, this code is placed in sequence under correct expression evaluation | since question and correct are numbers, versus strings, to place them in concatenation in print statements you must inclose them in Python function str() which turns number into string. | final print statement is concatenated and formatted to give user and right over wrong | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hacks . Test running a Python file directly . From python directory run quiz.py in VS Code, this will show workflow of Input and Output in terminal | . Build your own Jupyter Notebook meeting these College Board and CTE competencies . Build your own quiz, including my questions and show outputs | Create both Markdown for description and Code for execution | Structure your Python code with comments &quot;#&quot; to complement Markdown descriptions | . Additional requirements . Build your quiz so that it captures the key Vocabulary from this Jupyter document | Calculate the percentage of your quiz | Review College Board Big Idea outline, see if you can reference locations in Markdown that support vocabulary | . Extra credit, Advanced . Do you see repeating pattern of code? Try to implement solution to avoid the repeating pattern (hint: list and iteration) | .",
            "url": "https://gk92605.github.io/ginafastpages2/collegeboard/python",
            "relUrl": "/collegeboard/python",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "My life on bash",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# My Life on Bash! n”, “&gt; Bash is a shell that operates outside the kernel that helps people work with computers. A kernel (MacOS, Windows, Linux) is started when you boots up your computer. To activate the shell directly, users will run a &quot;terminal&quot; through the Desktop, VS Code or activate &quot;console&quot; while on a cloud computer like AWS. n”, “ n”, “- toc: true n”, “- comments: true n”, “- badges: true n”, “- permalink: /techtalk/bash n”, “- image: /images/bash.jpeg n”, “- categories: [techtalk]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## How to use Bash on Jupyter n”, “&gt; You can use a Bash Cheat sheet Bash Cheat Sheet n”, “ n”, “&gt; Install the Bash Kernel for Jupyter notebooks. n”, “ n”, “- pip install bash_kernel n”, “- python -m bash_kernel.install n”, “ n”, “Selecting a kernel in &quot;code –project–&quot; or &quot;jupyter notebook –file.ipynb–&quot; that have bash in options. n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## How to set up a Project Directory n”, “&gt; Pull code from git to your machine, which creates a project directory with APCSP added to it. The pull can only work if it did not already pre-exist. n”, “ n”, “- Hack: Change variables, make new directory, clone to that directory.” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Using conditional statement to create a project directory and project n”, “Directory /Users/ginakim/vscode exists. n”, “Directory /Users/ginakim/vscode/APCSP exists. n” ] } ], “source”: [ “echo &quot;Using conditional statement to create a project directory and project&quot; n”, “ n”, “# Variable section n”, “export project_dir=$HOME/vscode # change vscode to different name to test git clone n”, “export project=$project_dir/APCSP # change APCSP to name of project from git clone n”, “export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice n”, “ n”, “cd ~ # start in home directory n”, “ n”, “# Conditional block to make a project directory n”, “if [ ! -d $project_dir ] n”, “then n”, “ echo &quot;Directory $project_dir does not exists… makinng directory $project_dir&quot; n”, “ mkdir -p $project_dir n”, “fi n”, “echo &quot;Directory $project_dir exists.&quot; n”, “ n”, “# Conditional block to git clone a project from project_repo n”, “if [ ! -d $project ] n”, “then n”, “ echo &quot;Directory $project does not exists… cloning $project_repo&quot; n”, “ cd $project_dir n”, “ git clone $project_repo n”, “ cd ~ n”, “fi n”, “echo &quot;Directory $project exists.&quot; “ ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Look inside Fastpages/Github page project n”, “&gt; All computers contain files and directories. The clone brought more files from cloud to your machine. Using the bash shell you will see some commands that show and interact with files and directories. n”, “ n”, “- &quot;ls&quot; lists computer files in Unix and Unix-like operating systems n”, “- &quot;cd&quot; offers way to navigate and change working directory n”, “- &quot;pwd&quot; print working directory n”, “- &quot;echo&quot; used to display line of text/string that are passed as an argument” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Navigate to project, then navigate to area wwhere files were cloned n”, “/Users/ginakim/vscode/APCSP n”, “ n”, “list top level or root of files with project pulled from github n”, “Gemfile t t t_includes t t_word n”, “LICENSE t t t_layouts t tassets n”, “Makefile t t_notebooks t tdocker-compose.yml n”, “README.md t t_pages t t timages n”, “action_files t t_plugins t tindex.html n”, “_config.yml t t_posts t t tpython n”, “_fastpages_docs t t_sass n”, “ n”, “list again with hidden files pulled from github n”, “. t t tMakefile t t_posts n”, “.. t t tREADME.md t t_sass n”, “.devcontainer.json t_action_files t t_word n”, “.git t t t_config.yml t tassets n”, “.gitattributes t t_fastpages_docs t tdocker-compose.yml n”, “.github t t t_includes t timages n”, “.gitignore t t_layouts t tindex.html n”, “.vscode t t t_notebooks t tpython n”, “Gemfile t t t_pages n”, “LICENSE t t t_plugins n”, “ n”, “list all files in long format n”, “total 96 n”, “drwxr-xr-x 28 ginakim staff 896 Aug 19 12:32 . n”, “drwxr-xr-x 6 ginakim staff 192 Aug 28 20:45 .. n”, “-rw-r–r– 1 ginakim staff 420 Aug 19 12:32 .devcontainer.json n”, “drwxr-xr-x 15 ginakim staff 480 Aug 26 11:47 .git n”, “-rw-r–r– 1 ginakim staff 84 Aug 19 12:32 .gitattributes n”, “drwxr-xr-x 4 ginakim staff 128 Aug 19 12:32 .github n”, “-rw-r–r– 1 ginakim staff 917 Aug 19 12:32 .gitignore n”, “drwxr-xr-x 3 ginakim staff 96 Aug 21 20:29 .vscode n”, “-rwxr-xr-x 1 ginakim staff 1304 Aug 19 12:32 Gemfile n”, “-rw-r–r– 1 ginakim staff 11351 Aug 19 12:32 LICENSE n”, “-rwxr-xr-x 1 ginakim staff 1422 Aug 19 12:32 Makefile n”, “-rwxr-xr-x 1 ginakim staff 3614 Aug 19 12:32 README.md n”, “drwxr-xr-x 18 ginakim staff 576 Aug 19 12:32 _action_files n”, “-rw-r–r– 1 ginakim staff 3716 Aug 19 12:32 _config.yml n”, “drwxr-xr-x 24 ginakim staff 768 Aug 19 12:32 _fastpages_docs n”, “drwxr-xr-x 29 ginakim staff 928 Aug 19 12:32 _includes n”, “drwxr-xr-x 6 ginakim staff 192 Aug 19 12:32 _layouts n”, “drwxr-xr-x 14 ginakim staff 448 Aug 25 12:13 _notebooks n”, “drwxr-xr-x 9 ginakim staff 288 Aug 22 11:48 _pages n”, “drwxr-xr-x 4 ginakim staff 128 Aug 19 12:32 _plugins n”, “drwxr-xr-x 29 ginakim staff 928 Aug 26 11:38 _posts n”, “drwxr-xr-x 3 ginakim staff 96 Aug 19 12:32 _sass n”, “drwxr-xr-x 3 ginakim staff 96 Aug 19 12:32 _word n”, “drwxr-xr-x 4 ginakim staff 128 Aug 19 12:32 assets n”, “-rwxr-xr-x 1 ginakim staff 1136 Aug 19 12:32 docker-compose.yml n”, “drwxr-xr-x 52 ginakim staff 1664 Aug 21 20:29 images n”, “-rw-r–r– 1 ginakim staff 1061 Aug 19 12:32 index.html n”, “drwxr-xr-x 3 ginakim staff 96 Aug 19 12:32 python n” ] } ], “source”: [ “# You must run cells above to define variable and project n”, “ n”, “echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; n”, “cd $project n”, “pwd n”, “ n”, “echo &quot;&quot; n”, “echo &quot;list top level or root of files with project pulled from github&quot; n”, “ls n”, “ n”, “echo &quot;&quot; n”, “echo &quot;list again with hidden files pulled from github&quot; n”, “ls -a # hidden files flag, many shell commands have flags n”, “ n”, “echo &quot;&quot; n”, “echo &quot;list all files in long format&quot; n”, “ls -al # all files and long listing” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Look for posts n”, “/Users/ginakim/vscode/APCSP/_posts n”, “total 456 n”, “-rw-r–r– 1 ginakim staff 21306 Aug 19 12:32 2022-06-01-TT160-deploy.md n”, “-rw-r–r– 1 ginakim staff 5861 Aug 19 12:32 2022-07-07-PBL-binary.md n”, “-rw-r–r– 1 ginakim staff 3085 Aug 19 12:32 2022-07-08-PBL-grade_calc.md n”, “-rw-r–r– 1 ginakim staff 3698 Aug 19 12:32 2022-07-08-PBL-graph.md n”, “-rw-r–r– 1 ginakim staff 5729 Aug 19 12:32 2022-07-08-PBL-life.md n”, “-rw-r–r– 1 ginakim staff 14387 Aug 19 12:32 2022-07-08-PBL-snake.md n”, “-rw-r–r– 1 ginakim staff 334 Aug 19 12:32 2022-07-10-PBL-database.md n”, “-rw-r–r– 1 ginakim staff 2908 Aug 19 12:32 2022-07-10-PBL-jokes.md n”, “-rw-r–r– 1 ginakim staff 4046 Aug 19 12:32 2022-07-10-PBL-rapidapi.md n”, “-rw-r–r– 1 ginakim staff 6685 Aug 19 12:32 2022-07-19-PBL-calculator.md n”, “-rw-r–r– 1 ginakim staff 23325 Aug 19 12:32 2022-07-25-CSP-workshop.md n”, “-rw-r–r– 1 ginakim staff 2333 Aug 19 12:32 2022-08-15-TP000-student_score_history.md n”, “-rw-r–r– 1 ginakim staff 4363 Aug 19 12:32 2022-08-15-TP100-pseudo_code.md n”, “-rw-r–r– 1 ginakim staff 7968 Aug 19 12:32 2022-08-15-TR100-tool_setup.md n”, “-rw-r–r– 1 ginakim staff 15409 Aug 26 11:38 2022-08-15-TT100-tools.md n”, “-rw-r–r– 1 ginakim staff 5590 Aug 19 12:32 2022-08-15-TT101-vscode-wsl.md n”, “-rw-r–r– 1 ginakim staff 2155 Aug 22 11:48 2022-08-22-TR110-intro_python.md n”, “-rw-r–r– 1 ginakim staff 5173 Aug 19 12:32 2022-08-22-TT110-fastpages.md n”, “-rw-r–r– 1 ginakim staff 2798 Aug 22 11:48 2022-08-22-TT110-focus.md n”, “-rw-r–r– 1 ginakim staff 2737 Aug 19 12:32 2022-08-29-TR120-data_abstract.md n”, “-rw-r–r– 1 ginakim staff 10683 Aug 19 12:32 2022-08-29-TT120-agile.md n”, “-rw-r–r– 1 ginakim staff 4498 Aug 19 12:32 2022-08-29-TT120-html_fragments.md n”, “-rw-r–r– 1 ginakim staff 9037 Aug 19 12:32 2022-09-05-TP130-create_performance_task.md n”, “-rw-r–r– 1 ginakim staff 7753 Aug 19 12:32 2022-09-05-TP131-create-task-bria.md n”, “-rw-r–r– 1 ginakim staff 8066 Aug 19 12:32 2022-09-05-TR130-creative_development.md n”, “-rw-r–r– 1 ginakim staff 3520 Aug 19 12:32 2022-09-05-TT130-applab.md n”, “-rw-r–r– 1 ginakim staff 720 Aug 19 12:32 README.md n” ] } ], “source”: [ “# You must run cells above to define variable and project n”, “ n”, “echo &quot;Look for posts&quot; n”, “export posts=$project/_posts # _posts inside project n”, “cd $posts # this should exist per fastpages n”, “pwd # present working directory n”, “ls -l # list posts” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Look for notebooks n”, “/Users/ginakim/vscode/APCSP/_notebooks n”, “total 312 n”, “-rw-r–r– 1 ginakim staff 14243 Aug 19 12:32 2022-06-01-TT150-webapi_tutorial.ipynb n”, “-rw-r–r– 1 ginakim staff 8653 Aug 19 12:32 2022-07-21-PBL-neo4j_intro.ipynb n”, “-rw-r–r– 1 ginakim staff 13677 Aug 21 22:21 2022-08-21-test.ipynb n”, “-rw-r–r– 1 ginakim staff 11694 Aug 25 12:13 2022-08-22-TP110-python_hello.ipynb n”, “-rw-r–r– 1 ginakim staff 20003 Aug 25 11:51 2022-08-22-TT110-anthony_and_sahil.ipynb n”, “-rw-r–r– 1 ginakim staff 9525 Aug 22 11:48 2022-08-22-TT110-bash_tutorial.ipynb n”, “-rw-r–r– 1 ginakim staff 35721 Aug 25 12:13 2022-08-25-tool_check.ipynb n”, “-rw-r–r– 1 ginakim staff 10141 Aug 19 12:32 2022-08-29-TP120-python_lists.ipynb n”, “-rw-r–r– 1 ginakim staff 12632 Aug 19 12:32 2022-09-05-TT130-js_tutorial.ipynb n”, “-rw-r–r– 1 ginakim staff 771 Aug 19 12:32 README.md n”, “drwxr-xr-x 3 ginakim staff 96 Aug 21 20:29 images n” ] } ], “source”: [ “# You must run cells above to define variable and project n”, “ n”, “echo &quot;Look for notebooks&quot; n”, “export notebooks=$project/_notebooks # _notebooks is inside project n”, “cd $notebooks # this should exist per fastpages n”, “pwd # present working directory n”, “ls -l # list notebooks” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Look for images in notebooks, print working directory, list files n”, “/Users/ginakim/vscode/APCSP/_notebooks/images n”, “total 200 n”, “-rw-r–r– 1 ginakim staff 101617 Aug 21 20:29 kernels.png n” ] } ], “source”: [ “# You must run cells above to define notebooks location n”, “ n”, “echo &quot;Look for images in notebooks, print working directory, list files&quot; n”, “cd $notebooks/images # this should exist per fastpages n”, “pwd n”, “ls -l” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Look inside a Markdown File n”, “&gt; &quot;cat&quot; reads data from the file and gives its content as output” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Navigate to project, then navigate to area wwhere files were cloned n”, “show the contents of README.md n”, “ n”, “[//]: # (This template replaces README.md when someone creates a new repo with the fastpages template.) n”, “ n”, “ n”, “ n”, “ n”, “ n”, “https://nighthawkcoders.github.io/APCSP/ n”, “ n”, “# My Blog n”, “ n”, “ n”, “_powered by fastpages n”, “ n”, “ n”, “## What To Do Next? n”, “ n”, “Great! You have setup your repo. Now its time to start writing content. Some helpful links: n”, “ n”, “- Writing Blogs With Jupyter n”, “ n”, “- Writing Blogs With Markdown n”, “ n”, “- Writing Blog Posts With Word n”, “ n”, “- (Optional) Preview Your Blog Locally n”, “ n”, “Note: you may want to remove example blog posts from the _posts, _notebooks or _word folders (but leave them empty, don’t delete these folders) if you don’t want these blog posts to appear on your site. n”, “ n”, “Please use the nbdev &amp; blogging channel in the fastai forums for any questions or feature requests. n”, “ n”, “end of README.md n” ] } ], “source”: [ “# You must run cells above to define project n”, “echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; n”, “ n”, “cd $project n”, “echo &quot;show the contents of README.md&quot; n”, “echo &quot;&quot; n”, “ n”, “cat README.md # show contents of file, in this case markdown n”, “echo &quot;&quot; n”, “echo &quot;end of README.md&quot; n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Env, Git and GitHub n”, “&gt; Env(ironment) is used to capture things like path to Code or Home directory. Git and GitHub can also be used to exchange code through servers, in our case deployment for Website. All tools we use have a behind the scenes hav relationship with the system they run on (MacOS, Windows, Linus) or a relationship with servers which they are connected to (ie GitHub). There is an &quot;env&quot; command in bash. There are environment files and setting files (.git/config) for Git. They both use a key/value concept. n”, “ n”, “- &quot;env&quot; show setting for your shell n”, “- &quot;git clone&quot; sets up a director of files n”, “- &quot;cd $project&quot; allows user to move inside that directory of files n”, “- &quot;.git&quot; is a hidden directory that is used by git to establish relationship between machine and the git server on GitHub. “ ] }, { “cell_type”: “code”, “execution_count”: 7, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Show the shell environment variables, key on left of equal value on right n”, “ n”, “SHELL=/bin/bash n”, “TMPDIR=/var/folders/zc/l7m4hw457mq4l39j3y2qc1w0000gn/T/ n”, “CONDA_SHLVL=1 n”, “PYTHONUNBUFFERED=1 n”, “CONDA_PROMPT_MODIFIER=(base) n”, “OLDPWD=/Users/ginakim/vscode/APCSP/_notebooks/images n”, “ORIGINAL_XDG_CURRENT_DESKTOP=undefined n”, “MallocNanoZone=0 n”, “PYTHONIOENCODING=utf-8 n”, “USER=ginakim n”, “CONDA_EXE=/Users/ginakim/opt/anaconda3/bin/conda n”, “SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.kOv9A0h7nG/Listeners n”, “__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0 n”, “PAGER=cat n”, “VSCODE_AMD_ENTRYPOINT=vs/workbench/api/node/extensionHostProcess n”, “ELECTRON_RUN_AS_NODE=1 n”, “_CE_CONDA= n”, “PATH=/Library/Frameworks/Python.framework/Versions/2.7/bin:/Users/ginakim/opt/anaconda3/bin:/Users/ginakim/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin n”, “CONDA_PREFIX=/Users/ginakim/opt/anaconda3 n”, “PWD=/Users/ginakim/vscode/APCSP n”, “notebooks=/Users/ginakim/vscode/APCSP/_notebooks n”, “VSCODE_HANDLES_UNCAUGHT_ERRORS=true n”, “project_repo=https://github.com/nighthawkcoders/APCSP.git n”, “project=/Users/ginakim/vscode/APCSP n”, “project_dir=/Users/ginakim/vscode n”, “XPC_FLAGS=0x0 n”, “PS1=[PEXP [ ]ECT_PROMPT&gt; n”, “_CE_M= n”, “XPC_SERVICE_NAME=0 n”, “SHLVL=2 n”, “HOME=/Users/ginakim n”, “APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL=1 n”, “VSCODE_NLS_CONFIG={&quot;locale&quot;:&quot;en-us&quot;,&quot;availableLanguages&quot;:{},&quot;_languagePackSupport&quot;:true} n”, “CONDA_PYTHON_EXE=/Users/ginakim/opt/anaconda3/bin/python n”, “LOGNAME=ginakim n”, “VSCODE_IPC_HOOK=/Users/ginakim/Library/Application Support/Code/1.70.2-main.sock n”, “VSCODE_CODE_CACHE_PATH=/Users/ginakim/Library/Application Support/Code/CachedData/e4503b30fc78200f846c62cf8091b76ff5547662 n”, “CONDA_DEFAULT_ENV=base n”, “VSCODE_PID=1087 n”, “posts=/Users/ginakim/vscode/APCSP/_posts n”, “VSCODE_CWD=/ n”, “=/usr/bin/env n” ] } ], “source”: [ “# This command has no dependencies n”, “ n”, “echo &quot;Show the shell environment variables, key on left of equal value on right&quot; n”, “echo &quot;&quot; n”, “ n”, “env” ] }, { “cell_type”: “code”, “execution_count”: 8, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “ n”, “show the secrets of .git n”, “total 96 n”, “-rw-r–r– 1 ginakim staff 414 Aug 25 11:32 COMMIT_EDITMSG n”, “-rw-r–r– 1 ginakim staff 329 Aug 28 22:40 FETCH_HEAD n”, “-rw-r–r– 1 ginakim staff 23 Aug 19 12:32 HEAD n”, “-rw-r–r– 1 ginakim staff 41 Aug 26 11:47 ORIG_HEAD n”, “-rw-r–r– 1 ginakim staff 425 Aug 26 11:47 config n”, “-rw-r–r– 1 ginakim staff 73 Aug 19 12:31 description n”, “drwxr-xr-x 14 ginakim staff 448 Aug 19 12:31 hooks n”, “-rw-r–r– 1 ginakim staff 20117 Aug 26 11:46 index n”, “drwxr-xr-x 3 ginakim staff 96 Aug 19 12:31 info n”, “drwxr-xr-x 4 ginakim staff 128 Aug 19 12:32 logs n”, “drwxr-xr-x 108 ginakim staff 3456 Aug 25 12:13 objects n”, “-rw-r–r– 1 ginakim staff 46 Aug 26 11:47 packed-refs n”, “drwxr-xr-x 5 ginakim staff 160 Aug 19 12:32 refs n”, “ n”, “look at config file n”, “[core] n”, “ trepositoryformatversion = 0 n”, “ tfilemode = true n”, “ tbare = false n”, “ tlogallrefupdates = true n”, “ tignorecase = true n”, “ tprecomposeunicode = true n”, “[remote &quot;upstream&quot;] n”, “ turl = https://github.com/nighthawkcoders/APCSP.git n”, “ tfetch = +refs/heads/:refs/remotes/upstream/ n”, “[branch &quot;master&quot;] n”, “ tremote = origin n”, “ tmerge = refs/heads/master n”, “[remote &quot;origin&quot;] n”, “ turl = https://github.com/gk92605/APCSP.git n”, “ tfetch = +refs/heads/:refs/remotes/origin/ n” ] } ], “source”: [ “# This command has dependencies on project n”, “ n”, “cd $project n”, “ n”, “echo &quot;&quot; n”, “echo &quot;show the secrets of .git&quot; n”, “cd .git n”, “ls -l n”, “ n”, “echo &quot;&quot; n”, “echo &quot;look at config file&quot; n”, “cat config” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Bash”, “language”: “bash”, “name”: “bash” }, “language_info”: { “codemirror_mode”: “shell”, “file_extension”: “.sh”, “mimetype”: “text/x-sh”, “name”: “bash” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “8b82d5009c68ba5675978267e2b13a671f2a7143d61273c5a3813c97e0b2493d” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://gk92605.github.io/ginafastpages2/2022/08/22/my-life-on-bash.ipynb",
            "relUrl": "/2022/08/22/my-life-on-bash.ipynb",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gk92605.github.io/ginafastpages2/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . This is where I’ll update my work in APCSP. &#8617; . |",
          "url": "https://gk92605.github.io/ginafastpages2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gk92605.github.io/ginafastpages2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}