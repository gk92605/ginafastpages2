{
  
    
        "post0": {
            "title": "My Weekly Schedule",
            "content": "My Weekly Schedule! . . My school schedule . Period 1 . Marching Band with Dr. Kitelinger . Period 2 . AP Literature and Composition with Dr. Hall . Period 3 . AP Computer Science Principles with Mr. Mortensen . Period 4 . AP Statistics with Ms. Derksen . Period 5 . AP Government with Mrs. Dupas . . After School Activities . Monday . Marching band rehearsal . Tuesday . Work . Wednesday . Counselor meeting Clarinet Sectional . Thursday . Clarinet Sectional Anti Racism / For Equity Task Force Meeting Work . Friday . time for fun . Saturday . Work . Sunday . Church Lesson . . Everything is going to be all right. .",
            "url": "https://gk92605.github.io/ginafastpages2/markdown/2022/08/29/my-weekly-schedule.html",
            "relUrl": "/markdown/2022/08/29/my-weekly-schedule.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "My jupyter notebook",
            "content": "print (&quot;Hello World.&quot;) . Hello World. .",
            "url": "https://gk92605.github.io/ginafastpages2/2022/08/28/jupyter_notebook.html",
            "relUrl": "/2022/08/28/jupyter_notebook.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Lit Weekly Participation 8_22 26",
            "content": "AP Literature &amp; Composition: Weekly Participation Assignments . This week in AP Literature and Composition, I gained more experience on analyzing characters and understanding their meaning to the bigger picture of the story. We annotated four short stories, all covering topics that relate to bigger issues in society and people that represent diverse people of the world. Such as in the short story, “The Tell-Tale Heart” by Edgar Allan Poe, Poe utilizes first person point of view to represent the thought process of a psychopath, while not justifying his actions. By using descriptive language to bring the main character’s heightened emotions of panic, fear, and anxiety to life, so that the audience will get to live through them as well. Then, we also analyzed “Girl” by Jamaica Kincaid and studied what the girl and second voice in the short story meant. We connected the writing to the societal standards that have been long placed on young girls and how they struggle to break out of it because they’re questions of society are quickly shot down. Our group concluded our discussion onto a single document, Speaker Analysis Chart, where we analyzed that the Point of View of “Girl” was written in was 2nd person with consciousness filled in because of the feeling that we the reader is the girl being reprimanded on how to act and that the point of view of “The Tell-Tale Heart” was 1st person so that the reader would understand the panic and confusion the character faces. Doing the chart with my group and then expanding the conversation with the class allowed me to recognize how interpretations of certain things can vary so much. For example, I had never considered the heart in “The Tell-Heart” to symbolize anything except for maybe guilt, but hearing others talk about their perspectives, such as someone mentioning that it could resemble anxiety, opened my eyes to the world of personal interpretations. This was continued in the individual readings of “LUSUS Naturae” and “The Interpreter of Maladies.” When first reading these alone, I was only able to scratch the surface of what the authors intended and what certain things meant, but as I discussed with my group, we were able to point out specific instances or aspects of the story that I hadn’t noticed before. Having people notice something new about the characters or plot, such as the symbolism of the monkeys in “The Interpreter of Maladies,” allowed me to look at the text in a new light and create completely new interpretations of the author’s meaning. Also filling out the Character analysis chart helped me recognize the importance of the supporting characters and their impact in creating the theme of the story. Despite disliking certain characters, such as the mother and sister in “LUSUS Naturae” and Mrs. Das in “The Interpreter of Maladies,” looking at every aspect of their lives the author intended to know helped me recognize that they were needed in creating the full story and message. This carried on onto our Friday Literary group talks as we read the same text, but created various meanings and important aspects of the power of text and literature. Throughout this week, I was able to learn a lot about how to look deeper into characters in order to understand their meaning and connect them to the bigger picture. .",
            "url": "https://gk92605.github.io/ginafastpages2/2022/08/28/Lit-Weekly-Participation-8_22-26.html",
            "relUrl": "/2022/08/28/Lit-Weekly-Participation-8_22-26.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "My First Markdown!",
            "content": "My First Markdown! . . Here’s some stuff about me! . I have a 2 year old dog named Willow. . I play the clarinet, but can also slightly play the piano. . My favorite group is Seventeen and favorite singer is Conan Gray. . . Fun Facts . Favorite movie: La La Land and Spy Kids . Favorite book: Six of Crows . Favorite song: Clouds by One Direction . Favorite food: French Fries . . Make tomorrow a better day than today. .",
            "url": "https://gk92605.github.io/ginafastpages2/markdown/2022/08/26/test-markdown-post.html",
            "relUrl": "/markdown/2022/08/26/test-markdown-post.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "My First Image!",
            "content": "My First Image! . . This is a photo of me and my friends! . . .",
            "url": "https://gk92605.github.io/ginafastpages2/markdown/2022/08/26/image-trial.html",
            "relUrl": "/markdown/2022/08/26/image-trial.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Intro to Python",
            "content": "Print command using Static Text which performs output . In Python, to output a written message, you use a print() statement. . &quot;Hello, World&quot; is a String referred to as Static text, because it does not change. | &quot;Hello, World&quot; is a parameter to the print command. | The print command outputs the parameter to the terminal, as you see it in this Jupyter document | Output in Jupyter Notebook is below the code cell. Python print typically outputs to a terminal. | . print(&quot;Welcome to Python&quot;) . Welcome to Python . Variables: input and output . This second example is a sequence (two+ lines) of code. This takes input from the user and stores the input into the variable msg (message), and outputs the msg to terminal. - This example is Dynamic because the input and output can change. . A variable &quot;msg&quot; is part of both statement . The variable &quot;msg&quot; captures the input command | The variable &quot;msg&quot; is used as a parameter to print command, causing input to be output to terminal, or in Jupyter Notebook below the code cell. | . | The &quot;input&quot; command activates the jupyter notebook input box, which receives the user&#39;s input. . | The print command outputs the &quot;msg&quot; variable from the input statement msg is a parameter of the print function | . | Input and Output in Jupyter Notebook Input is NOT in line with Output. Input and Output varies depending on tools and development intentions. Python print typically obtains input and outputs to a terminal. | . msg = input(&quot;Enter a greeting: &quot;) print(msg) . Hi! Nice to meet you! . Building a Function . This adds to the basics of the Python anatomy, a function. Input, output, and grouping commands in functions is the key to most programming languages. . The &quot;def question_and_answer(prompt)&quot; contains multiple indented commands. | Grouping a sequence of commands, often repeatedly, is called procedural abstraction. | Procedure, Function, def are all synonyms in the Python language. | The &quot;def&quot; is a key word in Python that defines a function. Using this keyword defines a group of commands, but does not run them initially. | . The name of the function in this example is &quot;question_and_answer&quot;. In essence, we are defining our own command within the Python language. | The three &quot;question_and_answer&quot; commands that follow the function and indented commands allow this function to be run. | This code run multiple times, each command line providing a unique &quot;prompt&quot; as a result of the literal parameter passed to the function. | The function takes a parameter called &quot;prompt&quot;, which is a message output to the user to describe the input requested. | String concatenation &quot;+&quot; prefixes the prompt with the literal message &quot;Question: &quot;. | The &quot;msg&quot; variable is captured as a result of the jupyter notebook input supplied by the user | The input &quot;msg&quot; is output back to the user with &quot;Answer: &quot; concatenated to the front. | . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;What is the process of grouping a sequence of commnads?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) question_and_answer(&quot;What is a dynamic function?&quot;) . Question: What is the process of grouping a sequence of commnads? Answer: procedural abstraction Question: If you see many lines of code in order, what would College Board call it? Answer: sequence Question: Describe a keyword used in Python to define a function? Answer: def Question: What is a dynamic function? Answer: a function that changes . Imports, Selection, and Logical Expressions . In Python anatomy of you will be importing libraries and functions. This is code that is developed by others. We will import from a library called &quot;os&quot;, this library extracts properties from the operating system of your existing system. This example also uses the custom function defined earlier in the Jupyter document. Python and Jupyter docs requires you to reference imports and definitions above the referencing line of code. . import os, sys obtain functions and variables from running environment | print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable + &quot; on &quot; + sys.platform + &quot;!&quot;), is a concatenated statement that outputs properties from the import | . Next, this example defines a new function &quot;question_with_response&quot;, this function returns a value input by the user. This allows programmer to evaluate the response. The purpose of obtaining the return value is to evaluate if correct response was given to the question. . response from &quot;question_with_response&quot; is captured in a variable called &quot;rsp&quot; return command in function returns msg input by user | assignment to &quot;rsp&quot; is allowed a function is returning a value, names do not need to match (but could) | . | if command is next command in sequence after &quot;rsp&quot; assignment this command contains an expression, rsp == &quot;import&quot; which compare what is typed to the string literal answer | an if expression is evaluated for true or false | true takes branch of code directly under if | false takes branch of code directly under else command | . | . The grand finally of this example is calculating the right/total. . question = 3 is defined as number of questions | correct = 0 is defined as running score | correct += 1 is the way to add one to the score, this code is placed in sequence under correct expression evaluation | since question and correct are numbers, versus strings, to place them in concatenation in print statements you must inclose them in Python function str() which turns number into string. | final print statement is concatenated and formatted to give user and right over wrong | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 5 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What statement turns a number into a string?&quot;) if rsp == &quot;function str()&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How was this quiz on Python? - hint: include a :)&quot;) if rsp == &quot;good :)&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, ginakim running /usr/local/bin/python3 You will be asked 5 questions. Question: Are you ready to take a test? Answer: yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: What statement turns a number into a string? function str() is correct! Question: How was this quiz on Python? - hint: include a :) good :) is correct! ginakim you scored 5/5 .",
            "url": "https://gk92605.github.io/ginafastpages2/collegeboard/python",
            "relUrl": "/collegeboard/python",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gk92605.github.io/ginafastpages2/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages [^1]. . This is where I’ll update my work in APCSP. . I’ll also include my school work and things I’ve learned in this class. . [^1] I will make an effort to learn more. .",
          "url": "https://gk92605.github.io/ginafastpages2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gk92605.github.io/ginafastpages2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}